---
// Component Imports
import MainLayout from '../layouts/MainLayout.astro';
import YPRChart from '../components/YPRChart.tsx';
import TotalYardsChart from '../components/TotalYardsChart.tsx';
import PossessionTimeChart from '../components/PossessionTimeChart.tsx';
import TotalRushTDChart from '../components/RushTDChart.tsx';
import SacksAllowedChart from '../components/SacksAllowedChart.tsx';
import TflAllowedChart from '../components/TflAllowedChart';
import SchoolStatsTable from '../components/SchoolStatsTable.tsx';
import QBHurriesAllowedChart from '../components/QBHurriesAllowedChart.tsx';
import calculateSchoolAverages from '../utils/statAverage';
import dataframes from '../data/BoxScoreAnalysis';

import type { SchoolAverage } from '../utils/statAverage';


// Full Astro Component Syntax:
// https://docs.astro.build/basics/astro-components/


// Mock data
const allData = dataframes;

const yprAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_YPR, 'stat', true)
const yardsAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_TotalYards, 'stat', true)
const rushTdAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_RushTD, 'stat', true)
const sacksAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_Sacks, 'opponent_stat_value', false)
const tflAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_Tfl, 'opponent_stat_value', false)
const qbHurriesAverages: SchoolAverage[] = calculateSchoolAverages(allData.Multi_School_QBHurries, 'opponent_stat_value', false)


const rushTdAverageWinning =  rushTdAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;
const yprAverageWinning =  yprAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;
const yardsAverageWinning =  yardsAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;
const sacksAverageWinning =  sacksAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;
const tflAverageWinning =  tflAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;
const qbHurriesAverageWinning =  qbHurriesAverages.find(school => school.school === 'Nebraska')?.isTop33Percent;

const charts = [
	{
		title: 'Yards per Attempt',
		description: 'looking at the yards per rush',
		link: 'offense/rushing-offense-yards-per-rush'
	},
	{
		title: 'Total Yards Rushing',
		description: 'how many yards did they get rushing for each game',
		link: ''
	}
]

---


<MainLayout>
	<!-- Story Intro Section -->
	<div class="grid grid-cols-1 mx-8 my-12">
		<div class="bg-white shadow-md rounded-lg p-10 flex flex-col md:flex-row items-start">
			
			<!-- Text Content Column -->
			<div class="md:w-full md:pr-8">
			<p class="mb-4 text-gray-700">
				<h1 class="text-2xl text-gray-700">Are the Huskers winning with the offensive line?</h1>
			</p>
			<p class="my-4 text-gray-700">
				<article class="prose lg:prose-base">
					<p>These statistics only include games with <span class="font-bold">Big Ten vs. Big Ten</span> match-ups.</p>
					<p>We decided on this so that games against non conference opponents or lower division schools do not influence the charts in an unfavorable way for teams, in either direction.</p>
					<p>Games included are from the 2024 season</p>
				</article>
			</p>
			</div>
		</div>
	</div>

	<section>
		<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mx-8">
		  {charts.map(chart => (
			<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
			 
			  <div class="p-4">
				<h3 class="text-lg font-bold text-gray-800 truncate">{chart.title}</h3>
				<p class="text-sm text-gray-600 mt-2">
				  {chart.description.length > 150 ? `${chart.description.substring(0, 150)}...` : chart.description}
				</p>
				<a 
				  href={`/${chart.link}/`} 
				  class="block mt-4 text-blue-600 hover:underline text-sm font-semibold"
				>
				  View Chart â†’
				</a>
			  </div>
			</div>
		  ))}
		</div>
	  </section>

	<div class="grid grid-cols-1 md:grid-cols-3 gap-8 mx-8 my-12">
		<!-- Total Rush Yards -->

		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">Total Rushing Yards Chart</div>
			<TotalYardsChart client:only="react"/>
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="text-red-500 text-2xl font-bold mb-2">Rushing Yards</div>
			<SchoolStatsTable data={yardsAverages} />
		</div>

		<!-- Total Rush Touchdowns -->

		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">Total Rushing Touchdowns</div>
			<TotalRushTDChart client:only="react"/>
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="text-red-500 text-2xl font-bold mb-2">Rushing Touchdowns</div>
			<SchoolStatsTable data={rushTdAverages} />
		</div>

		<!-- Total Possession Time -->

		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">Possession Time Chart</div>
			<PossessionTimeChart client:only="react"/>
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			Notes here
		</div>
		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">Sacks Allowed</div>
			<SacksAllowedChart client:only="react"/>
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="text-red-500 text-2xl font-bold mb-2">Sacks Allowed</div>
			<SchoolStatsTable data={sacksAverages} />
		</div>
		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">QB Hurries Allowed</div>
			<QBHurriesAllowedChart client:only="react" />
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="text-red-500 text-2xl font-bold mb-2">QB Hurries Allowed</div>
			<SchoolStatsTable data={qbHurriesAverages} />
		</div>
		<div class="bg-white shadow-md rounded-lg p-6 md:col-span-2">
			<div class="text-red-500 text-2xl font-bold mb-4">Tackles for Loss Allowed</div>
			<TflAllowedChart client:only="react"/>
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="text-red-500 text-2xl font-bold mb-2">Tackles for Loss Allowed</div>
			<SchoolStatsTable data={tflAverages} />
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
		</div>
		<div class="bg-white shadow-md rounded-lg p-6">
			<article class="prose lg:prose-base">
				<p class="">Yards per rush provides a commonly used rushing efficiency metric. It takes into consideration how many rushes your offense had in a game, plus the resulting yards gained from those plays.</p>
				<p>One thing to consider is that in CFB yards lost because of sacks count against the total rushing yards (this is different than the NFL).</p>
				<p>In this evaluation, we are not looking at how well the Huskers ran the footbal, we are using ypr as a proxy metric to understand if the offensive line is winning, therefore adjusting for sack yardage is not done here.</p>
				<p>Additionally, this stat does not adust for yards before and after contact, therefore it is possible the line play is not great, but the running backs are just getting a lot of yards after contact.</p>
				<p>In the context of the following metrics, we believe this metric is a great place to start a review.</p>
			</article>
		</div>
	</div>
</MainLayout>